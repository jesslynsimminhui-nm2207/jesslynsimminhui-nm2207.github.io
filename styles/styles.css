body {
  background-color: #5e94b0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  color: rgb(47, 43, 43);
  padding-left: 12px;
  padding-top: 4px;
}

.mouse {
  font-size: 24px;
}

.counter {
  color: #0b0b0a;
}

h2 {
  color: #f9a8d4;
}

.container {
  font-family: "Times New Roman", Times, serif;
  height:98%;
  width:98%;
}

.container > * {
  background-color: #183BF0;
  padding: 0.8em;
  border-radius: 25px
}

h1{
  text-align: center;
  line-height:0.8px;
  color:#FBA90A;
}

h2{
  text-align: center;
  color:#091032;
}


/* Typically, you wouldn't specify a height or min-height on this, instead allowing your actual content (i.e., text, images, etc.) to dictate the height of your content area. But since this example has very minimal content, I've set a min-height to mimic a taller content area. */
.content {
  min-height: 40%;
  overflow-y: scroll;
}
.sidebar{
  overflow-y: scroll
}
/* Layout is stacked vertically by default (for narrower viewports), so give some breathing room between the sections. */
/* Select all elements where parent is a container */
.container > * {
  margin-bottom: 1%;
}

@media screen and (min-width: 40em) {
  .container > * {
    margin-bottom: 0;
  }
  /* Define the grid */
  .container {
    display: grid;
    grid-template-columns: 19% 60% 19%;
    grid-gap: 1% 1%;
    grid-template-rows: 10% auto 10%;
  }
  /* Place items on the grid */
  .header {
    grid-column: 1 / span 3;

  }
  .sidebar {
    grid-row-end: span 2;
    background-color: #F7EBD4
  }
  .content {
    grid-column: 2;
    background-color: #F7EBD4
  }
  .footer {  
    grid-column: 1 / span 3;
    background-color: #091032;
    text-align: right;
    
  }

}